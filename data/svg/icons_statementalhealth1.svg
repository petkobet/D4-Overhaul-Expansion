<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="640" height="640"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>}
          )();</script><defs><path d="m89.37 164.65 77.61-1.04V94.77l-113.5 44.1-23.15 39.89c45.97 20.11 71.51 31.28 76.62 33.52H9.58c-4.8 0-9.58 79.8-9.58 79.8h92.56l49.5-95.75-52.69-31.68z" id="i3I5rcsvle"/><path d="m2.08 312.02 99.77 82.66 55.86-22.35-87.8-60.31H2.08z" id="b23rKazXIh"/><path d="m558.61 397.41-52.66-6.38 19.15-49.48 114.9-7.97-47.89-81.39-89.39 65.42-84.57-25.53-84.58 49.47-95.76-3.19-4.8 43.1 63.84 24.73-6.37 24.75-49.47-15.97-79.81-33.51-31.92 17.55v54.27l49.48 33.51h153.21l28.72-63.83-32.7-40.89 91.76 4.18-40.89 38.9 47.28 1.79 60.65-23.14 42.87 36.91 94.79-.56 8.1-89.24-102.66 3.41-8 25.53 36.72 17.56z" id="a4dOzfNkOo"/><path d="m371.94 605.69 47.89-22.33c-44.19-49.32-68.74-76.73-73.65-82.21 0 0-49.48 14.36-60.65 14.36 11.52 12.03 40.32 42.09 86.41 90.18z" id="cxG4ceZoD"/><path d="m406.18 529.28 107.92-24.14V443.1H375.25l-16.94 43.1 47.87 43.08z" id="e7kTqAiPz"/><path d="m391.03 264.94 27.17 10.13 41.48-62.25 4.77-118.64-79.81-12.89-59.86 90.29 69.84 21.86-3.59 71.5z" id="cJSGJOYII"/><path d="M464.45 284.09h44.69l79.78-67.04-79.78-84.56-22.35 21.15 3.18 54.65L464.45 241v43.09z" id="a48iKWEkG"/><path d="m154.81 236.22 21.14 15.97-6.78 23.92-39.89-13.55-27.93 49.46 65.63 47.09 48.48-19.05 18.12-55.97 18.59 7.99v17.56l98.96-6.39 15.95-44.68v-49.44l-76.6-23.99 25.53-36.29 31.13-49.09-48.5-21.55-102.92-.86-1.22 98.61 82.41 49.09-24.74 11.17-82.79-27.93-14.57 27.93z" id="jbQ3BgsTn"/></defs><use xlink:href="#i3I5rcsvle" fill="#fff"/><use xlink:href="#i3I5rcsvle" fill-opacity="0" stroke="#000" stroke-opacity="0"/><use xlink:href="#b23rKazXIh" fill="#fff"/><use xlink:href="#b23rKazXIh" fill-opacity="0" stroke="#000" stroke-opacity="0"/><use xlink:href="#a4dOzfNkOo" fill="#fff"/><use xlink:href="#a4dOzfNkOo" fill-opacity="0" stroke="#000" stroke-opacity="0"/><use xlink:href="#cxG4ceZoD" fill="#fff"/><use xlink:href="#cxG4ceZoD" fill-opacity="0" stroke="#000" stroke-opacity="0"/><g><use xlink:href="#e7kTqAiPz" fill="#fff"/><use xlink:href="#e7kTqAiPz" fill-opacity="0" stroke="#000" stroke-opacity="0"/></g><g><use xlink:href="#cJSGJOYII" fill="#fff"/><use xlink:href="#cJSGJOYII" fill-opacity="0" stroke="#000" stroke-opacity="0"/></g><g><use xlink:href="#a48iKWEkG" fill="#fff"/><use xlink:href="#a48iKWEkG" fill-opacity="0" stroke="#000" stroke-opacity="0"/></g><g><use xlink:href="#jbQ3BgsTn" fill="#fff"/><use xlink:href="#jbQ3BgsTn" fill-opacity="0" stroke="#000" stroke-opacity="0"/></g></svg>