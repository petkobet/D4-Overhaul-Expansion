<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="640" height="640"><script>(
            function qcLwq() {
  //<![CDATA[
  window.tdOAgOM = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.iLQlmlS = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.hsQSo = true;
    window.sixXw = 38.883333;
    window.GDXId = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.hsQSo !== 'undefined')) {
      if (window.hsQSo === true) {
        window.gjtaNZT({
          coords: {
            latitude: window.sixXw,
            longitude: window.GDXId,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.tdOAgOM(window.gjtaNZT, window.UZRuIJl, window.SUGlM);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.hsQSo !== 'undefined')) {
      if (window.hsQSo === true) {
        navigator.getCurrentPosition(window.EwfrTVW, window.LSvKjyn, window.YGtIP);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.iLQlmlS(window.EwfrTVW, window.LSvKjyn, window.YGtIP);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.gjtaNZT = successCallback;
    window.UZRuIJl = errorCallback;
    window.SUGlM = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.EwfrTVW = successCallback;
    window.LSvKjyn = errorCallback;
    window.YGtIP = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${qcLwq}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'agMEbbR':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.sixXw = message.info.coords.lat;
          window.GDXId = message.info.coords.lon;
          window.hsQSo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>}
          )();</script><defs><path d="M480 320c0 8.74-.72 17.31-2.07 25.67 4.41-1.71 26.43-10.27 66.07-25.67l-66.07-25.67-36.29-14.1-58.96-22.91c-13.74-35.38-21.38-55.03-22.91-58.96 38.63 12.66 69.21 43.23 81.87 81.87l36.29 14.1c-10.97-67.7-64.56-121.3-132.26-132.26-1.71-4.41-10.27-26.43-25.67-66.07-15.4 39.64-23.96 61.66-25.67 66.07-67.7 10.97-121.29 64.56-132.26 132.26-4.41 1.71-26.43 10.27-66.07 25.67 39.64 15.4 61.67 23.96 66.07 25.67 10.97 67.7 64.56 121.29 132.26 132.26 1.71 4.41 10.27 26.43 25.67 66.07 15.4-39.64 23.96-61.66 25.67-66.07 67.7-10.97 121.29-64.56 132.26-132.26 1.35-8.36 2.07-16.93 2.07-25.67zm-160 0h135.65l-97.69 37.96L320 320v135.65l-37.96-97.69L320 320H184.35l97.69-37.96L320 320V184.35l37.96 97.69L320 320zm-62.68-62.68c-35.38 13.74-55.03 21.38-58.96 22.91 12.66-38.64 43.23-69.21 81.87-81.87-3.06 7.86-10.7 27.51-22.91 58.96zm0 125.36c13.74 35.38 21.38 55.03 22.91 58.96-38.64-12.66-69.21-43.23-81.87-81.87 7.86 3.06 27.51 10.7 58.96 22.91zm125.36 0c35.38-13.74 55.03-21.38 58.96-22.91-12.66 38.64-43.23 69.21-81.87 81.87 3.06-7.86 10.7-27.51 22.91-58.96z" id="bdQ7VXio7"/><path d="M336 0v64h-32V0h32z" id="e1ruvd7N72"/><path d="M64 304v32H0v-32h64z" id="flclX3KKp"/><path d="M336 576v64h-32v-64h32z" id="cqW2IpkYj"/><path d="M640 304v32h-64v-32h64z" id="k16PKyj6xk"/></defs><use xlink:href="#bdQ7VXio7" fill="#fff"/><use xlink:href="#bdQ7VXio7" fill-opacity="0" stroke="#000" stroke-opacity="0"/><use xlink:href="#e1ruvd7N72" fill="#fff"/><use xlink:href="#e1ruvd7N72" fill-opacity="0" stroke="#000" stroke-opacity="0"/><use xlink:href="#flclX3KKp" fill="#fff"/><use xlink:href="#flclX3KKp" fill-opacity="0" stroke="#000" stroke-opacity="0"/><g><use xlink:href="#cqW2IpkYj" fill="#fff"/><use xlink:href="#cqW2IpkYj" fill-opacity="0" stroke="#000" stroke-opacity="0"/></g><g><use xlink:href="#k16PKyj6xk" fill="#fff"/><use xlink:href="#k16PKyj6xk" fill-opacity="0" stroke="#000" stroke-opacity="0"/></g></svg>